{"version":3,"file":"./accordion/accordion.min.js","mappings":"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","sources":["webpack://js-components/./src/components/accordion/accordion.ts"],"sourcesContent":["const PREFIX = 'jsc';\r\nconst ACCORDIONSELECTOR = `[data-${PREFIX}-accCon]`;\r\nlet toggleTimeoutId: ReturnType<typeof setTimeout>;\r\n\r\n///credit https://stackoverflow.com/questions/1349404/generate-random-string-characters-in-javascript\r\nfunction randmoId( length: number = 8 )  {\r\n   let result           = '';\r\n   let characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n   let charactersLength = characters.length;\r\n\r\n   for( let i = 0; i < length; i++ )  {\r\n      result += characters.charAt( Math.floor( Math.random() * charactersLength ) );\r\n   }\r\n\r\n   return result;\r\n}\r\n\r\ninterface AccordionArgs  {\r\n   container: string | HTMLElement,\r\n   button?: string | Element | HTMLElement | HTMLCollectionOf<HTMLElement> | NodeListOf<HTMLElement> | (HTMLElement| string)[] | undefined | null,\r\n   collapsed?: boolean | undefined,\r\n   collapseText?: string | undefined,\r\n   expendText?: string | undefined,\r\n}\r\n\r\nclass JscAccordion  {\r\n   container: HTMLElement | null = null;\r\n   collapsed: boolean;\r\n   button: AccordionArgs['button'];\r\n   collapseText: AccordionArgs['collapseText'];\r\n   expendText: AccordionArgs['expendText'];\r\n\r\n   constructor( args: AccordionArgs )  {\r\n      let tempCon: HTMLElement | string = args.container;\r\n\r\n      ///check if container value is htmlElement or some DOM query string\r\n      if( typeof tempCon === 'string' )  {\r\n         tempCon = ( document.querySelector( tempCon ) as HTMLElement );\r\n      }\r\n\r\n      ///if container argument is falsey return\r\n      if( !tempCon || ( tempCon instanceof HTMLElement ) === false ) return\r\n\r\n      this.container = tempCon;\r\n\r\n      ///trigger\r\n      if( args.button ) this.button = args.button;\r\n\r\n      ///if collapsed argument is defined and have boolean a value then change the collapsed value\r\n      ///otherwise it can be change via html.\r\n      ///it will not overwrite the html value when you defined collapsed value argument.\r\n      if( args.collapsed !== undefined )  {\r\n         if( !args.collapsed )  {\r\n            this.collapsed = false;\r\n         } else if( args.collapsed === true )  {\r\n            this.collapsed = true;\r\n         }\r\n      }\r\n\r\n      this._init();\r\n   }\r\n\r\n   _init()  {\r\n      if( !this.container ) return\r\n\r\n      this.container.style.overflow = 'hidden';\r\n\r\n      ///set new id if the container don't have one\r\n      if( this.container.id === '' )  {\r\n         let id = randmoId();\r\n\r\n         while( true )  {\r\n            if( document.getElementById( id ) )  {\r\n               id = randmoId();\r\n               continue\r\n            }\r\n            break\r\n         }\r\n\r\n         this.container.id = `${PREFIX}${id}`;\r\n      }\r\n\r\n      ///set accordion data\r\n      if( this.container.getAttribute( `data-${PREFIX}-accCon` ) === null || this.container.getAttribute( `data-${PREFIX}-accCon` ) !== 'false' )  {\r\n         this.container.setAttribute( `data-${PREFIX}-accCon`, 'true' );\r\n      }\r\n\r\n      ///if collapsed value is undefined change the value to html collapse value default is true\r\n      if( this.collapsed === undefined )  {\r\n         const collapseValue = this.container.getAttribute( 'data-collapse' );\r\n         if( collapseValue === 'false' )  {\r\n            this.collapsed = false;\r\n         } else {\r\n            this.collapsed = true;\r\n         }\r\n      }\r\n\r\n      this.container.setAttribute( 'data-collapse', this.collapsed + '' );\r\n\r\n      ///if the collapse value is true hide the element\r\n      if( this.collapsed ) this.container.style.display = 'none';\r\n\r\n      this._init_target();\r\n   }\r\n\r\n   _init_target()  {\r\n      if( !this.button ) return\r\n\r\n      let trigger: any = null;\r\n\r\n      if( this.button instanceof HTMLElement )  {\r\n         trigger = this.button;\r\n      } else if( typeof this.button === 'string' )  {\r\n         trigger = document.querySelector( this.button );\r\n      }\r\n\r\n      if( trigger )  {\r\n         this._finalizeTarget( trigger );\r\n         return\r\n      }\r\n\r\n      if( this.button instanceof HTMLCollection || this.button instanceof NodeList || this.button instanceof Array )  {\r\n         //@ts-ignore\r\n         const btns = Array.from( this.button );\r\n\r\n         btns.forEach( ( el ) => {\r\n            if( el instanceof HTMLCollection || el instanceof NodeList ) return\r\n\r\n            let btn: any = el;\r\n\r\n            if( typeof btn === 'string' )  {\r\n               btn = document.querySelector( btn );\r\n            }\r\n\r\n            if( !btn ) return\r\n\r\n            this._finalizeTarget( btn );\r\n         });\r\n      }\r\n   }\r\n\r\n   _finalizeTarget( target: HTMLElement )  {\r\n      // @ts-ignore\r\n      const containerId = this.container.id;\r\n\r\n      target.setAttribute( `data-${PREFIX}-target`, containerId );\r\n      target.setAttribute( 'aria-expanded', `${!this.collapsed}` );\r\n      target.setAttribute( 'aria-controls', containerId );\r\n\r\n      let text: string | null;\r\n\r\n      if( this.collapsed )  {\r\n\r\n         if( this.collapseText !== undefined )  {\r\n            text = this.collapseText;\r\n         } else {\r\n            text = target.getAttribute( 'data-collapsetext' );\r\n         }\r\n\r\n         target.classList.add( 'collapsed' );\r\n      } else {\r\n\r\n         if( this.expendText !== undefined )  {\r\n            text = this.expendText;\r\n         } else {\r\n            text = target.getAttribute( 'data-expendtext' );\r\n         }\r\n      }\r\n\r\n      if( text !== null ) target.innerText = text;\r\n   }\r\n\r\n   enable()  {\r\n      this.container?.setAttribute( `data-${PREFIX}-accCon`, 'true' );\r\n   }\r\n\r\n   disable()  {\r\n      this.container?.setAttribute( `data-${PREFIX}-accCon`, 'false' );\r\n   }\r\n\r\n   toggle()  {\r\n      if( !( this.container instanceof HTMLElement ) ) return\r\n\r\n      accordionToggle( this.container );\r\n   }\r\n}\r\n\r\n\r\nfunction accordionToggle( accordion: HTMLElement )  {\r\n   ///whether container is collapsed\r\n   let isCollapse = accordion.dataset.collapse === 'true' ? true : false;\r\n   ///adding 60ms more for transition bug\r\n   const transitionTime = 300 + 60;\r\n   ///save the height of futher use\r\n   let acHeight = accordion.offsetHeight;\r\n\r\n   if( accordion.classList.contains( 'colexping' ) ) return\r\n   ///add a class to accordion\r\n   accordion.classList.add( 'colexping' );\r\n\r\n   ///just a measure for unkown transition bugs won't happen\r\n   ///when previous setTimeout is not happend already\r\n   ///see below setTimeout for more\r\n   clearTimeout( toggleTimeoutId );\r\n\r\n   ///deducting 60ms for transition bug\r\n   accordion.style.transition = `height ${transitionTime - 60}ms ease-in-out`;\r\n   toggleTimeoutId = setTimeout( () => {\r\n      accordion.style.transition = '';\r\n   },\r\n   transitionTime );\r\n\r\n   if( isCollapse )  {\r\n      //it will change the whatever display the element has before\r\n      accordion.style.display = '';\r\n\r\n      ///to get the full height of the element\r\n      accordion.style.height = 'auto';\r\n\r\n      ///not using this method for now might be using this in future\r\n      // accordion.setAttribute('style', 'height:auto !important');\r\n\r\n      ///update the height because if accordion is collapsed\r\n      ///previous value has to be 0 and we need the current height \r\n      ///of the accordion for further use\r\n      acHeight = accordion.offsetHeight;\r\n\r\n      ///immediately change the element height to 0\r\n      accordion.style.height = '0';\r\n\r\n      ///wait just a little bit for animation to work properly\r\n      setTimeout( () =>  {\r\n         accordion.style.height = acHeight + 'px';\r\n      }, 0 );\r\n\r\n      ///after animation change inline height to nothing\r\n      setTimeout( () =>  {\r\n         accordion.style.height = '';\r\n         accordion.classList.remove( 'colexping' );\r\n      }, transitionTime );\r\n\r\n      accordion.dataset.collapse = 'false';\r\n\r\n      isCollapse = false;\r\n\r\n   } else if( !isCollapse )  {\r\n\r\n      accordion.style.height = acHeight + 'px';\r\n\r\n      setTimeout( () =>  {\r\n         accordion.style.height = '0';\r\n      }, 5 );\r\n\r\n      setTimeout( () =>  {\r\n         accordion.style.display = 'none';\r\n         accordion.style.height = '';\r\n         accordion.classList.remove( 'colexping' );\r\n      }, transitionTime );\r\n\r\n      accordion.dataset.collapse = 'true';\r\n\r\n      isCollapse = true;\r\n   }\r\n\r\n   const triggerer = document.querySelectorAll( `[data-${PREFIX}-target=\"${accordion.id}\"]` ) as NodeListOf<HTMLElement>;\r\n\r\n   triggerer.forEach( ( el: HTMLElement ) =>  {\r\n\r\n      let text: undefined | string = undefined;\r\n\r\n      if( isCollapse )  {\r\n         text = el.dataset.collapsetext;\r\n         el.setAttribute( 'aria-expanded', 'false' );\r\n         el.classList.add( 'collapsed' );\r\n      }\r\n\r\n      if( !isCollapse )  {\r\n         text = el.dataset.expendtext\r\n         el.setAttribute( 'aria-expanded', 'true' );\r\n         el.classList.remove( 'collapsed' );\r\n      }\r\n\r\n      text !== undefined && ( el.innerText = text );\r\n   });\r\n}\r\n\r\n\r\nfunction accordionToggleEventHandler( e: Event )  {\r\n   const target = e.target as HTMLElement;\r\n   const acID: any = target.dataset[`${PREFIX}Target`];\r\n\r\n   if( acID === null || acID === '' ) return\r\n\r\n   const accordion = ( document.querySelector( `${ACCORDIONSELECTOR}#${acID}` ) as HTMLElement );\r\n\r\n   if( !accordion || accordion.getAttribute( `data-${PREFIX}-accCon` ) === 'false' || accordion.classList.contains( 'colexping' ) ) return\r\n\r\n   accordionToggle( accordion );\r\n}\r\n\r\n///Run necessary \"things\" when DOM loaded\r\nwindow.onload = () =>  {\r\n   ///add click event of accordion trigger to body for event Bubbling\r\n   document.body.addEventListener( 'click', accordionToggleEventHandler );\r\n\r\n   ///get all the accordion content container\r\n   const allAccordion = document.querySelectorAll( ACCORDIONSELECTOR ) as NodeListOf<HTMLElement>;\r\n\r\n   ///convert accordion container to \"accordion\"\r\n   allAccordion.forEach( item =>  {\r\n      let triggerer;\r\n      const accId = item.id;\r\n\r\n      if( accId === '' )  {\r\n         ///not selecting all the triggerer elements\r\n         ///because of nested accordion under the container\r\n         triggerer = item.closest( '.jsc-accordion' )?.querySelector( `[data-${PREFIX}-target]` ) as HTMLElement;\r\n      } else if( accId !== '' )  {\r\n         triggerer = document.querySelectorAll( `[data-${PREFIX}-target=\"${item.id}\"]` ) as NodeListOf<HTMLElement>;\r\n      }\r\n\r\n      new JscAccordion({\r\n         container: item,\r\n         button: triggerer,\r\n      });\r\n   });\r\n}\r\n"],"names":["length","result","characters","charactersLength","i","args","tempCon","id","trigger","el","btn","target","containerId","text","accordion","isCollapse","transitionTime","acHeight","acID","item","triggerer","accId"],"sourceRoot":""}