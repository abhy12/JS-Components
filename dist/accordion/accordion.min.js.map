{"version":3,"file":"accordion/accordion.min.js","mappings":"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","sources":["webpack://js-components/./src/components/accordion/accordion.ts"],"sourcesContent":["const PREFIX = 'jsc';\r\nconst ACCORDIONSELECTOR = `[data-${PREFIX}-accCon]`;\r\nlet toggleTimeoutId: ReturnType<typeof setTimeout>;\r\n\r\n///credit https://stackoverflow.com/questions/1349404/generate-random-string-characters-in-javascript\r\nfunction randmoId( length: number = 8 )  {\r\n   let result           = '';\r\n   let characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n   let charactersLength = characters.length;\r\n\r\n   for( let i = 0; i < length; i++ )  {\r\n      result += characters.charAt( Math.floor( Math.random() * charactersLength ) );\r\n   }\r\n\r\n   return result;\r\n}\r\n\r\ninterface AccordionArgs  {\r\n   container: string | HTMLElement,\r\n   button?: string | Element | HTMLElement | HTMLCollectionOf<HTMLElement> | NodeListOf<HTMLElement> | (HTMLElement| string)[] | undefined | null,\r\n   collapsed?: boolean | undefined,\r\n   collapseText?: string | undefined,\r\n   expendText?: string | undefined,\r\n}\r\n\r\nclass JscAccordion  {\r\n   container: HTMLElement | null = null;\r\n   collapsed: boolean;\r\n   button: AccordionArgs['button'];\r\n   collapseText: AccordionArgs['collapseText'];\r\n   expendText: AccordionArgs['expendText'];\r\n\r\n   constructor( args: AccordionArgs )  {\r\n      let tempCon: HTMLElement | string = args.container;\r\n\r\n      ///check if container value is htmlElement or some DOM query string\r\n      if( typeof tempCon === 'string' )  {\r\n         tempCon = ( document.querySelector( tempCon ) as HTMLElement );\r\n      }\r\n\r\n      ///if container argument is falsey return\r\n      if( !tempCon || ( tempCon instanceof HTMLElement ) === false ) return\r\n\r\n      this.container = tempCon;\r\n\r\n      ///trigger\r\n      if( args.button ) this.button = args.button;\r\n\r\n      ///if collapsed argument is defined and have boolean a value then change the collapsed value\r\n      ///otherwise it can be change via html.\r\n      ///it will not overwrite the html value when you defined collapsed value argument.\r\n      if( args.collapsed !== undefined )  {\r\n         if( !args.collapsed )  {\r\n            this.collapsed = false;\r\n         } else if( args.collapsed === true )  {\r\n            this.collapsed = true;\r\n         }\r\n      }\r\n\r\n      this._init();\r\n   }\r\n\r\n   _init()  {\r\n      if( !this.container ) return\r\n\r\n      this.container.style.overflow = 'hidden';\r\n\r\n      ///set new id if the container don't have one\r\n      if( this.container.id === '' )  {\r\n         let id = randmoId();\r\n\r\n         while( true )  {\r\n            if( document.getElementById( id ) )  {\r\n               id = randmoId();\r\n               continue\r\n            }\r\n            break\r\n         }\r\n\r\n         this.container.id = `${PREFIX}${id}`;\r\n      }\r\n\r\n      ///set accordion data\r\n      if( this.container.getAttribute( `data-${PREFIX}-accCon` ) === null || this.container.getAttribute( `data-${PREFIX}-accCon` ) !== 'false' )  {\r\n         this.container.setAttribute( `data-${PREFIX}-accCon`, 'true' );\r\n      }\r\n\r\n      ///if collapsed value is undefined change the value to html collapse value default is true\r\n      if( this.collapsed === undefined )  {\r\n         const collapseValue = this.container.getAttribute( 'data-collapse' );\r\n         if( collapseValue === 'false' )  {\r\n            this.collapsed = false;\r\n         } else {\r\n            this.collapsed = true;\r\n         }\r\n      }\r\n\r\n      this.container.setAttribute( 'data-collapse', this.collapsed + '' );\r\n\r\n      ///if the collapse value is true hide the element\r\n      if( this.collapsed ) this.container.style.display = 'none';\r\n\r\n      this._init_target();\r\n   }\r\n\r\n   _init_target()  {\r\n      if( !this.button ) return\r\n\r\n      let trigger: any = null;\r\n\r\n      if( this.button instanceof HTMLElement )  {\r\n         trigger = this.button;\r\n      } else if( typeof this.button === 'string' )  {\r\n         trigger = document.querySelector( this.button );\r\n      }\r\n\r\n      if( trigger )  {\r\n         this._finalizeTarget( trigger );\r\n         return\r\n      }\r\n\r\n      if( this.button instanceof HTMLCollection || this.button instanceof NodeList || this.button instanceof Array )  {\r\n         //@ts-ignore\r\n         const btns = Array.from( this.button );\r\n\r\n         btns.forEach( ( el ) => {\r\n            if( el instanceof HTMLCollection || el instanceof NodeList ) return\r\n\r\n            let btn: any = el;\r\n\r\n            if( typeof btn === 'string' )  {\r\n               btn = document.querySelector( btn );\r\n            }\r\n\r\n            if( !btn ) return\r\n\r\n            this._finalizeTarget( btn );\r\n         });\r\n      }\r\n   }\r\n\r\n   _finalizeTarget( target: HTMLElement )  {\r\n      // @ts-ignore\r\n      const containerId = this.container.id;\r\n\r\n      target.setAttribute( `data-${PREFIX}-target`, containerId );\r\n      target.setAttribute( 'aria-expanded', `${!this.collapsed}` );\r\n      target.setAttribute( 'aria-controls', containerId );\r\n\r\n      let text: string | null;\r\n\r\n      if( this.collapsed )  {\r\n\r\n         if( this.collapseText !== undefined )  {\r\n            text = this.collapseText;\r\n         } else {\r\n            text = target.getAttribute( 'data-collapsetext' );\r\n         }\r\n\r\n         target.classList.add( 'collapsed' );\r\n      } else {\r\n\r\n         if( this.expendText !== undefined )  {\r\n            text = this.expendText;\r\n         } else {\r\n            text = target.getAttribute( 'data-expendtext' );\r\n         }\r\n      }\r\n\r\n      if( text !== null ) target.innerText = text;\r\n   }\r\n\r\n   enable()  {\r\n      this.container?.setAttribute( `data-${PREFIX}-accCon`, 'true' );\r\n   }\r\n\r\n   disable()  {\r\n      this.container?.setAttribute( `data-${PREFIX}-accCon`, 'false' );\r\n   }\r\n\r\n   toggle()  {\r\n      if( !( this.container instanceof HTMLElement ) ) return\r\n\r\n      accordionToggle( this.container );\r\n   }\r\n}\r\n\r\n\r\nfunction accordionToggle( accordion: HTMLElement )  {\r\n   ///whether container is collapsed\r\n   let isCollapse = accordion.dataset.collapse === 'true' ? true : false;\r\n   ///adding 60ms more for transition bug\r\n   const transitionTime = 300 + 60;\r\n   ///save the height of futher use\r\n   let acHeight = accordion.offsetHeight;\r\n\r\n   if( accordion.classList.contains( 'colexping' ) ) return\r\n   ///add a class to accordion\r\n   accordion.classList.add( 'colexping' );\r\n\r\n   ///just a measure for unkown transition bugs won't happen\r\n   ///when previous setTimeout is not happend already\r\n   ///see below setTimeout for more\r\n   clearTimeout( toggleTimeoutId );\r\n\r\n   ///deducting 60ms for transition bug\r\n   accordion.style.transition = `height ${transitionTime - 60}ms ease-in-out`;\r\n   toggleTimeoutId = setTimeout( () => {\r\n      accordion.style.transition = '';\r\n   },\r\n   transitionTime );\r\n\r\n   if( isCollapse )  {\r\n      //it will change the whatever display the element has before\r\n      accordion.style.display = '';\r\n\r\n      ///to get the full height of the element\r\n      accordion.style.height = 'auto';\r\n\r\n      ///not using this method for now might be using this in future\r\n      // accordion.setAttribute('style', 'height:auto !important');\r\n\r\n      ///update the height because if accordion is collapsed\r\n      ///previous value has to be 0 and we need the current height \r\n      ///of the accordion for further use\r\n      acHeight = accordion.offsetHeight;\r\n\r\n      ///immediately change the element height to 0\r\n      accordion.style.height = '0';\r\n\r\n      ///wait just a little bit for animation to work properly\r\n      setTimeout( () =>  {\r\n         accordion.style.height = acHeight + 'px';\r\n      }, 0 );\r\n\r\n      ///after animation change inline height to nothing\r\n      setTimeout( () =>  {\r\n         accordion.style.height = '';\r\n         accordion.classList.remove( 'colexping' );\r\n      }, transitionTime );\r\n\r\n      accordion.dataset.collapse = 'false';\r\n\r\n      isCollapse = false;\r\n\r\n   } else if( !isCollapse )  {\r\n\r\n      accordion.style.height = acHeight + 'px';\r\n\r\n      setTimeout( () =>  {\r\n         accordion.style.height = '0';\r\n      }, 5 );\r\n\r\n      setTimeout( () =>  {\r\n         accordion.style.display = 'none';\r\n         accordion.style.height = '';\r\n         accordion.classList.remove( 'colexping' );\r\n      }, transitionTime );\r\n\r\n      accordion.dataset.collapse = 'true';\r\n\r\n      isCollapse = true;\r\n   }\r\n\r\n   const triggerer = document.querySelectorAll( `[data-${PREFIX}-target=\"${accordion.id}\"]` ) as NodeListOf<HTMLElement>;\r\n\r\n   triggerer.forEach( ( el: HTMLElement ) =>  {\r\n\r\n      let text: undefined | string = undefined;\r\n\r\n      if( isCollapse )  {\r\n         text = el.dataset.collapsetext;\r\n         el.setAttribute( 'aria-expanded', 'false' );\r\n         el.classList.add( 'collapsed' );\r\n      }\r\n\r\n      if( !isCollapse )  {\r\n         text = el.dataset.expendtext\r\n         el.setAttribute( 'aria-expanded', 'true' );\r\n         el.classList.remove( 'collapsed' );\r\n      }\r\n\r\n      text !== undefined && ( el.innerText = text );\r\n   });\r\n}\r\n\r\n\r\nfunction accordionToggleEventHandler( e: Event )  {\r\n   const target = e.target as HTMLElement;\r\n   const acID: any = target.dataset[`${PREFIX}Target`];\r\n\r\n   if( acID === null || acID === '' ) return\r\n\r\n   const accordion = ( document.querySelector( `${ACCORDIONSELECTOR}#${acID}` ) as HTMLElement );\r\n\r\n   if( !accordion || accordion.getAttribute( `data-${PREFIX}-accCon` ) === 'false' || accordion.classList.contains( 'colexping' ) ) return\r\n\r\n   accordionToggle( accordion );\r\n}\r\n\r\n///Run necessary \"things\" when DOM loaded\r\nwindow.onload = () =>  {\r\n   ///add click event of accordion trigger to body for event Bubbling\r\n   document.body.addEventListener( 'click', accordionToggleEventHandler );\r\n\r\n   ///get all the accordion content container\r\n   const allAccordion = document.querySelectorAll( ACCORDIONSELECTOR ) as NodeListOf<HTMLElement>;\r\n\r\n   ///convert accordion container to \"accordion\"\r\n   allAccordion.forEach( item =>  {\r\n      let triggerer;\r\n      const accId = item.id;\r\n\r\n      if( accId === '' )  {\r\n         ///not selecting all the triggerer elements\r\n         ///because of nested accordion under the container\r\n         triggerer = item.closest( '.jsc-accordion' )?.querySelector( `[data-${PREFIX}-target]` ) as HTMLElement;\r\n      } else if( accId !== '' )  {\r\n         triggerer = document.querySelectorAll( `[data-${PREFIX}-target=\"${item.id}\"]` ) as NodeListOf<HTMLElement>;\r\n      }\r\n\r\n      new JscAccordion({\r\n         container: item,\r\n         button: triggerer,\r\n      });\r\n   });\r\n}\r\n"],"names":["PREFIX","ACCORDIONSELECTOR","toggleTimeoutId","randmoId","length","result","characters","charactersLength","i","charAt","Math","floor","random","JscAccordion","constructor","args","container","tempCon","document","querySelector","HTMLElement","this","button","undefined","collapsed","_init","style","overflow","id","getElementById","getAttribute","setAttribute","collapseValue","display","_init_target","trigger","_finalizeTarget","HTMLCollection","NodeList","Array","from","forEach","el","btn","target","containerId","text","collapseText","classList","add","expendText","innerText","enable","disable","toggle","accordionToggle","accordion","isCollapse","dataset","collapse","transitionTime","acHeight","offsetHeight","contains","clearTimeout","transition","setTimeout","height","remove","querySelectorAll","collapsetext","expendtext","accordionToggleEventHandler","e","acID","window","onload","body","addEventListener","item","triggerer","accId","closest"],"sourceRoot":""}